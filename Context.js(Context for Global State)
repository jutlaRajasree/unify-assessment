// blog-app-frontend/src/context/AuthContext.js
import React, { createContext, useState, useEffect, useContext } from 'react';
import api from '../services/api';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [loading, setLoading] = useState(true); // To check initial auth state

    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            // Optionally, you can add an endpoint to verify the token's validity
            // e.g., api.get('/auth/verify-token')
            setIsAuthenticated(true);
        }
        setLoading(false);
    }, []);

    const login = async (email, password) => {
        try {
            const res = await api.post('/auth/login', { email, password });
            localStorage.setItem('token', res.data.token);
            setIsAuthenticated(true);
            return true;
        } catch (err) {
            console.error('Login failed:', err);
            setIsAuthenticated(false);
            return false;
        }
    };

    const register = async (email, password) => {
        try {
            const res = await api.post('/auth/register', { email, password });
            localStorage.setItem('token', res.data.token);
            setIsAuthenticated(true);
            return true;
        } catch (err) {
            console.error('Registration failed:', err);
            setIsAuthenticated(false);
            return false;
        }
    };

    const logout = () => {
        localStorage.removeItem('token');
        setIsAuthenticated(false);
    };

    return (
        <AuthContext.Provider value={{ isAuthenticated, login, register, logout, loading }}>
            {!loading && children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);
